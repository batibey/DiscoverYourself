@model dynamic
@using System.Globalization
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Mvc.TagHelpers
@inject IViewLocalizer localizer
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@localizer["LoginMsg"]</title>
    <link rel="stylesheet" href="~/css/login.css" asp-append-version="true">
</head>
<body>
<div class="login-container">
    <h1>@localizer["LoginMsg"]</h1>
    <form asp-action="Login" method="post">
        <input type="email" name="email" placeholder="@localizer["EmailMsg"]" class="neon-input" required />
        <input type="password" name="password" placeholder="@localizer["PasswordMsg"]" class="neon-input" required />
        <button type="submit" class="neon-button">@localizer["LoginMsg"]</button>
    </form>
    <div class="register-language-container">
        <div class="register-link">
            <a href="@Url.Action("Register", "Account")" class="btn custom-btn">@localizer["RegisterMsg"]</a>
        </div>
        <div class="language-selector">
            <a href="@Url.Action("SetCulture", "Culture", new { culture = "en", returnUrl = ViewContext.HttpContext.Request.Path })"
               class="btn custom-btn @(CultureInfo.CurrentUICulture.Name == "en" ? "active" : "")">
                English
            </a>
            <a href="@Url.Action("SetCulture", "Culture", new { culture = "tr", returnUrl = ViewContext.HttpContext.Request.Path })"
               class="btn custom-btn @(CultureInfo.CurrentUICulture.Name == "tr" ? "active" : "")">
                Türkçe
            </a>
        </div>
    </div>
</div>
</body>
</html>
